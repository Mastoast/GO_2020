[gd_scene load_steps=10 format=2]

[ext_resource path="res://Sprites/player.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

var target = preload(\"res://Objects/Target.tscn\")
var trail = preload(\"res://Objects/Trail.tscn\")

export (int) var run_max_speed = 350
export (int) var run_acceleration = 70
export (int) var run_friction = 35

export (int) var jump_speed = -600
export (int) var gravity = 1500
export (float) var fall_multiplier = 1.8

export (int) var max_dash_distance = 10000


var targets : Array

var velocity = Vector2()
var jumping = false
var n_max_target = 25

func _ready():
	pass

func _enter_tree():
	pass

func get_movement():
	var right = Input.is_action_pressed('ui_right')
	var left = Input.is_action_pressed('ui_left')
	var jump = Input.is_action_just_pressed('ui_up')


	# Run
	if not (right or left) or abs(velocity.x) > run_max_speed:
		var signX = sign(velocity.x)
		velocity.x -= sign(velocity.x) * run_friction
		if sign(velocity.x) != signX:
			velocity.x = 0
	else:
		if right:
			velocity.x += run_acceleration
		if left:
			velocity.x -= run_acceleration
	
	# Jump
	if jump:
		if is_on_floor():
			jumping = true
			velocity.y = jump_speed
		elif is_on_wall():
			jumping = true
			velocity.y = jump_speed
			velocity.x = 1.5*run_max_speed * -sign(velocity.x)

func _process(delta):
	# DEBUG
	if Input.is_key_pressed(KEY_R):
		get_tree().reload_current_scene()
	if Input.is_key_pressed(KEY_ESCAPE):
		get_tree().quit()
	
	# Slice to target
	if Input.is_action_just_pressed(\"mouse_left\"):
		if targets.size() != 0:
			slice()

	# Pop target
	if Input.is_action_just_pressed(\"mouse_right\"):
		var new_tar = target.instance()
		self.get_parent().add_child(new_tar)
		new_tar.position = self.position
		targets.append(new_tar)
		# Check max targets
		if targets.size() > n_max_target:
			# Remove oldest target
			var old_tar = targets.pop_front()
			old_tar.get_parent().remove_child(old_tar)
			old_tar.free()

	# Animations
	if (jumping):
		set_anim(\"jump\")
	elif (velocity.x == 0):
		set_anim(\"idle\")
	else:
		set_anim(\"run\")
	
	if velocity.x > 0:
		$AnimatedSprite.flip_h = false
	elif velocity.x < 0:
		$AnimatedSprite.flip_h = true

	# Refresh visuals
	update()

func slice():
	var old_tar = targets.pop_front()
	var dest_pos = old_tar.position
	var diff = dest_pos - self.position
	var is_bonk = false
	
	# Find colliders in the way
	$TargetRayCast.cast_to = diff
	$TargetRayCast.force_raycast_update()
	while $TargetRayCast.get_collider() != null:
		print($TargetRayCast.get_collision_point())
		var n_col = $TargetRayCast.get_collider()
		if n_col == old_tar:
			break
		# Bonk
		elif not (n_col.has_method(\"pierce\") && n_col.pierce()):
			dest_pos = $TargetRayCast.get_collision_point()
			diff = dest_pos - self.position
			is_bonk = true
			break
		$TargetRayCast.add_exception(n_col)
		$TargetRayCast.force_raycast_update()
	
	$TargetRayCast.clear_exceptions()
	$TargetRayCast.add_exception(self)
	
	# Trail
	var n_trail = trail.instance()
	self.get_parent().add_child(n_trail)
	n_trail.trail(self.position, dest_pos)
	
	# Dash inertie
	if is_bonk:
		pass
	else:
		# TODO rework
		diff = diff.normalized() * abs(jump_speed)
		velocity = Vector2(-sign(diff.x) * jump_speed, jump_speed)
	
	# Change position
	self.position = dest_pos
	old_tar.get_parent().remove_child(old_tar)
	old_tar.free()

func set_anim(name):
	if $AnimatedSprite.animation != name:
		$AnimatedSprite.animation = name

func _physics_process(delta):
	get_movement()
	# Jump adaptative jump
	if(velocity.y <= 0 && Input.is_action_pressed('ui_up')):
		velocity.y += gravity * delta
	else:
		velocity.y += gravity * fall_multiplier * delta

	if jumping and is_on_floor():
		jumping = false
	velocity = move_and_slide(velocity, Vector2(0, -1))

func _draw():
	var lower_dist = max_dash_distance
	var lower_vect
	for tar in targets:
		if (self.position.distance_to(tar.position)) < lower_dist:
			lower_dist = self.position.distance_to(tar.position)
			lower_vect = tar.position

	if lower_vect:
		draw_line(Vector2(0,0), lower_vect - self.position, Color.aliceblue)
"

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 2 )
region = Rect2( 16, 16, 16, 16 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 2 )
region = Rect2( 0, 16, 16, 16 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 2 )
region = Rect2( 0, 0, 16, 16 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 2 )
region = Rect2( 16, 0, 16, 16 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 2 )
region = Rect2( 32, 0, 16, 16 )

[sub_resource type="SpriteFrames" id=7]
animations = [ {
"frames": [ SubResource( 2 ) ],
"loop": true,
"name": "idle",
"speed": 5.0
}, {
"frames": [ SubResource( 3 ) ],
"loop": true,
"name": "jump",
"speed": 5.0
}, {
"frames": [ SubResource( 4 ), SubResource( 5 ), SubResource( 6 ) ],
"loop": true,
"name": "run",
"speed": 5.0
} ]

[sub_resource type="RectangleShape2D" id=8]
extents = Vector2( 11.558, 14.035 )

[node name="Char" type="KinematicBody2D"]
collision_layer = 2
collision_mask = 7
script = SubResource( 1 )
__meta__ = {
"_edit_group_": true
}

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
scale = Vector2( 2, 2 )
frames = SubResource( 7 )
animation = "idle"
playing = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, 1 )
shape = SubResource( 8 )

[node name="TargetRayCast" type="RayCast2D" parent="."]
collision_mask = 2147483655
collide_with_areas = true
